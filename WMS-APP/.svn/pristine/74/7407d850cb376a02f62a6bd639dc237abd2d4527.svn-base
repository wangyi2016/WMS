package com.mjzk.agv.communicate;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.util.List;

import org.apache.log4j.Logger;

import com.mjzk.agv.beans.Agv;
import com.mjzk.agv.beans.AgvState;
import com.mjzk.agv.beans.Task;
import com.mjzk.agv.common.Common;
import com.mjzk.agv.factory.InstructFactory;
import com.mjzk.agv.log4j.LoggerFactory;
import com.mjzk.agv.map.MapManager;
import com.mjzk.agv.pojo.InstructSet;
import com.mjzk.agv.pojo.Node;
import com.mjzk.agv.serviceimpl.AgvStateService;
import com.mjzk.agv.task.TaskManager;

/**
 * 与已有AGV保持通信
 * 
 * @author XieChangJiang
 *
 */
public class CommunicateHandler implements Runnable {

	/**
	 * 线程对应的AGV
	 */
	private Agv agv;

	/**
	 * 任务
	 */
	private Task task;

	/**
	 * 
	 */
	private AgvStateService statusService;

	/**
	 * 地图
	 */
	private MapManager mapManager;

	/**
	 * 
	 */
	public boolean run = true;

	/**
	 * socket 输入输出流
	 */
	public DataOutputStream outputStream = null;
	public DataInputStream inputStream = null;

	/**
	 * 数据与指令数组
	 */
	public byte[] bytes = new byte[512];
	public byte[] write = null;

	/**
	 * 读取数据的长度
	 */
	int length = 0;

	private int targetRFID;

	/**
	 * 地标标识，AGV在取料点和放料点来回的走，但是 行走的路径不同 当mark=1， 取料点 -> 放料点 mark=2 放料点 -> 取料点 ,3
	 * 是充电标识
	 */
	public int mark = 1;

	/**
	 * 日志类
	 */
	public Logger logger;
	
	/**
	 * 路径字符串，主要用于数据库字段保存
	 */
	public String pathString = "" ;
	
	/**
	 * 
	 */
	public Socket socket  ;

	public CommunicateHandler() {
	}

	/**
	 * 构造方法，实例变量的同时，将AGV对应的任务线路存在内存中。
	 * 
	 * @param agv
	 * @param statusService
	 * @param task
	 */
	public CommunicateHandler(Agv agv, AgvStateService statusService, Task task) {
		logger = LoggerFactory.getLogger();
		logger.info(agv.getAgv_code() + "--通信进程启动，正在准备数据");
		this.agv = agv;
		this.task = task;
		this.agv.setRun_Flag(true);
		this.task.setStatus(true);
		this.statusService = statusService;
		mapManager = new MapManager(agv);
		Common.path.put(agv, TaskManager.getTaskList(task.getStartRfid(), task.getTargetRfid(), logger));
		pathString = mapManager.getPathString(task.getStartRfid(), task.getTargetRfid()) ;
		this.agv.setTaskName(task.getName());
		this.agv.setTaskCode(task.getTask_code());
		targetRFID = task.getTargetRfid();
		Common.AGVS.add(agv) ;
		Common.TASK.add(task) ;
	}

	/**
	 * 线程时刻与AGV保持通信，每个AGV都有一个线程与其保持通信
	 */
	public void run() {

		try {
			while (run) {
				
                while(!isConnect()){
                	logger.info(agv.getAgv_code() + "--正在尝试与AGV进行通信链接 ...................");
                	try {
						Thread.sleep(2 * 1000) ;
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
                }
			    logger.info("服务器与AGV连接成功 ......");
                
				outputStream = new DataOutputStream(socket.getOutputStream());
				inputStream = new DataInputStream(socket.getInputStream());

				while (!Thread.currentThread().isInterrupted()) {

					logger.info(agv.getAgv_code() + "--已获得与AGV的通信连接 , 正在发送数据读取指令 .............");

					/** 读AGV当前状态 **/
					outputStream.write(InstructFactory.getDefaultReadRegInstruct()); /** 发送读AGV请求 **/
					length = inputStream.read(bytes); /** 获取AGV发回的信息 **/

					/** 向AGV发送指令 **/
					InstructSet set = assist();
					write = InstructFactory.getWriteRegInstruct(set);

					outputStream.write(write);
					length = inputStream.read(bytes);

					try {
						Thread.sleep(5 * 1000);
					} catch (InterruptedException e) {
						run = false;
						inputStream.close();
						outputStream.close();
						socket.close();
						e.printStackTrace();
						Thread.currentThread().interrupt();
					}
				}
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public AgvState getAgvState(Agv agv, TempState tempState) {
		AgvState state = new AgvState();
		state.setCode(agv.getAgv_code());
		state.setCurrent_rfid(tempState.getCurrentRfid());
		state.setTarget_rfid(tempState.getTargetRfid());
		state.setReal_spd(tempState.getTargetSpd());
		state.setElectric(tempState.getElectric());
		state.setRun_state(tempState.getRunstatus());
		state.setTime(new Timestamp(System.currentTimeMillis()));
		state.setDirection(tempState.getLeftOrRigth());
		state.setLink(pathString);
		return state;
	}

	public InstructSet assist() {

		logger.info(agv.getAgv_code() + "--已获得AGV信息，正在解析AGV数据 .............");

		InstructSet set = new InstructSet(); /** 发送指令集 **/
		TempState tempState = new TempState();

		for (int i = 9; i < length; i = i + 2) {
			int number, rfid = 0;
			number = InstructFactory.hexToDecimal(i, bytes); /** 十六进制转十进制 **/

			if (i == 9) { /** 启动或停止 0 为停止，1为启动 **/
				tempState.setStopOrStart(number);
				logger.info(agv.getAgv_code() + "--AGV启动停止状态：" + number);

			} else if (i == 11) { /** 当前速度 **/
				tempState.setTargetSpd(number);
				logger.info(agv.getAgv_code() + "--AGV当前前进速度：  " + number);

				set.setTargetSpd((byte) number);

			} else if (i == 13) { /** 左右转 left 0 , right 1 **/
				tempState.setLeftOrRigth(number);
				logger.info(agv.getAgv_code() + "--AGV当前寻址方向：  " + number);

			} else if (i == 15) { /** 目标rfid **/
				tempState.setTargetRfid(targetRFID);
				logger.info(agv.getAgv_code() + "--AGV目标RFID：  " + number);
				set.setTargetRfid((byte) targetRFID);

			} else if (i == 17) {
				/**
				 * 运行状态 0 未知 ,1 运行中 ,2 暂停 ,3 充电, 默认为0
				 **/
				tempState.setRunstatus(number);
				set.setRunstatus((byte)number);
				logger.info(agv.getAgv_code() + "--AGV当前的运行状态：  " + number);

			} else if (i == 19) {/** 当前Rfid **/

				tempState.setCurrentRfid(number);
				rfid = number;
				logger.info(agv.getAgv_code() + "--AGV当前RFID：  " + number);
				if (rfid == targetRFID) {
					JudgeTargetRFID();
				}
				if(Marker(rfid)){
					/**如果下一个节点是需要标记的节点**/
					logger.info(agv.getAgv_code() + "--下一个节点是需要标记的点...");
					Node next = mapManager.getNextNode(rfid) ;
					if(next.isFlag()){
						if(agv.isMark()){
							int direct = mapManager.getNextNodeDirect(rfid) ;
							set.setLeftOrRight((byte)direct);
						}else{
							set.setRunstatus((byte)2); /**如果不是自己标记的，则暂停**/
							logger.info(agv.getAgv_code() + "--正在等待其他AGV通过 ...........");
						}
					}else{
						/**如果没有被标记，则标记该点**/
						next.setFlag(true);
						agv.setMark(true);
						int direct = mapManager.getNextNodeDirect(rfid) ;
						set.setLeftOrRight((byte)direct);
					}
				}
				
				/**如果下一个节点是不需要标记的节点**/
				Node node = mapManager.getCurNode(rfid) ;
				if(node.isFlag()){
					logger.info(agv.getAgv_code() + "--正在解除该点的标记.............");
					node.setFlag(false);
					if(agv.isMark()){
						agv.setMark(false);
					}
				}
				int direct = mapManager.getNextNodeDirect(rfid) ;
                logger.info(agv.getAgv_code() + "--下一个节点是： " + mapManager.getNextNode(rfid).getName());
                set.setLeftOrRight((byte)direct);
                set.setTargetRfid((byte)targetRFID);
                
			} else { /**
						 * 当前电量,当电量低到预设值得时候,将当前 的任务完成,获取充电任务,前往充电地点
						 **/
				tempState.setElectric(number);
				logger.info(agv.getAgv_code() + "--AGV当前电量：  " + number);
                agv.setBattery(number);
				if (number < Common.LOW_ELECTRIC) {
					/** 当电量小于预设值的时候，如果在搬运，在讲当前任务完成，前往充电地点 **/
					logger.info(agv.getAgv_code() + "--AGV当前电量过低，正在前往充电地点.......");
					Common.path.put(agv, TaskManager.getTaskList(targetRFID, Common.chargeRFID, logger));
					targetRFID = Common.chargeRFID;
				}
			}
		}
		System.out.println("");
		AgvState state = getAgvState(agv, tempState);
		statusService.add(state);
		Common.state.put(agv,state) ;
		return set;
	}

	/**
	 * 如果下一个点是需要标记的点，则返回true
	 * 
	 * @param rfid
	 * @return
	 */
	public boolean Marker(int rfid) {
		for (int i = 0; i < Common.Markers.length; i++)
			if (Common.Markers[i] == rfid)
				return true;
		return false;
	}
	
	public void JudgeTargetRFID(){
		/** 如果已经到达 targetRFID **/
		if (mark == 2) {
			logger.info(agv.getAgv_code() + "--已返回到起始 RFID , 正在查看电量是否充足........");
			if (agv.getBattery() - Common.LOW_ELECTRIC < Common.EVERY_POWER) { /** 前往充电点 **/
				logger.info(agv.getAgv_code() + "--电量已不足，正在前往充电地点.....");
				Common.path.put(agv, TaskManager.getTaskList(task.getStartRfid(), Common.chargeRFID, logger));
				pathString = mapManager.getPathString(task.getStartRfid(), Common.chargeRFID) ;
				targetRFID = Common.chargeRFID;
			} else {
				logger.info(agv.getAgv_code() + "--已返回到起始 RFID , 开始前往目标RFID");
				Common.path.put(agv,
						TaskManager.getTaskList(task.getStartRfid(), task.getTargetRfid(), logger));
				pathString = mapManager.getPathString(task.getStartRfid(), task.getTargetRfid()) ;
				targetRFID = task.getTargetRfid();
				mark = 1;
			}
		} else if (mark == 1) {
			logger.info(agv.getAgv_code() + "--已到达目标 RFID , 开始 返回 起始 RFID");
			Common.path.put(agv,
					TaskManager.getTaskList(task.getTargetRfid(), task.getStartRfid(), logger));
			pathString = mapManager.getPathString(task.getTargetRfid(), task.getStartRfid()) ;
			targetRFID = task.getStartRfid();
			mark = 2;
		} else {
			/** 到达充电地点，后续待处理 **/

		}
	}
	
	private boolean isConnect(){
		boolean ret = false ;
		try {
			socket = new Socket(agv.getIp_Adr(), Common.PORT);
			socket.setTcpNoDelay(true);
			socket.setSoLinger(true, 1);
			socket.setSoTimeout(0);
			socket.setKeepAlive(false);
			socket.setReceiveBufferSize(10240);
			ret = true ;
		} catch (Exception e) {
			ret = false ;
			e.printStackTrace();
		} 
		return ret ;
	}
}

class TempState {
	public TempState() {
	}

	int stopOrStart, runstatus, targetSpd, targetRfid, electric, leftOrRigth, currentRfid;

	/** 启动停止，运行状态，速度，目标rfid，电量，左右寻址 **/

	public int getStopOrStart() {
		return stopOrStart;
	}

	public void setStopOrStart(int stopOrStart) {
		this.stopOrStart = stopOrStart;
	}

	public int getRunstatus() {
		return runstatus;
	}

	public void setRunstatus(int runstatus) {
		this.runstatus = runstatus;
	}

	public int getTargetSpd() {
		return targetSpd;
	}

	public void setTargetSpd(int targetSpd) {
		this.targetSpd = targetSpd;
	}

	public int getTargetRfid() {
		return targetRfid;
	}

	public void setTargetRfid(int targetRfid) {
		this.targetRfid = targetRfid;
	}

	public int getElectric() {
		return electric;
	}

	public void setElectric(int electric) {
		this.electric = electric;
	}

	public int getLeftOrRigth() {
		return leftOrRigth;
	}

	public void setLeftOrRigth(int leftOrRigth) {
		this.leftOrRigth = leftOrRigth;
	}

	public int getCurrentRfid() {
		return currentRfid;
	}

	public void setCurrentRfid(int currentRfid) {
		this.currentRfid = currentRfid;
	}
}