package com.mjzk.agv.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.mjzk.agv.base.BaseAction;
import com.mjzk.agv.beans.Agv;
import com.mjzk.agv.common.Common;
import com.mjzk.agv.factory.AGVDataProcessFactory;
import com.mjzk.agv.pojo.AgvRTData;
import com.mjzk.agv.pojo.Data;
import com.mjzk.agv.serviceimpl.AgvService;
import com.mjzk.agv.serviceimpl.AgvStateService;
import net.sf.json.JSONObject;

/**
 * 对 agv的添加删除
 * 
 * @author XieChangJiang
 *
 */
@Namespace("/mjzk")
@ParentPackage("struts-default")
@Controller
@Scope("prototype")
public class AGVAction extends BaseAction<Agv> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/*
	 * @Resource private AgvStateService statusService;
	 */

	@Resource
	private AgvService service;

	@Resource
	private AgvStateService stateService;
	
	public static Logger logger =Logger.getLogger(AGVAction.class);

	/**
	 * 行
	 */
	private int rows;

	/**
	 * 多少页
	 */
	private int page;

	/**
	 * 添加agv
	 * 
	 * @return
	 * 
	 * 		RUL: /mjzk/addagv
	 */
	@Action(value = "addagv", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String addAGV() {
		Agv agv = model;
		
		/**如果不是是修改**/
		if(!isUpdate(agv)){
			agv.setLowBattery(Common.LOW_ELECTRIC);
			service.add(agv);

			if (agv.getGo() == 1) {
				/** 启用 **/
				Common.V_QUEUE.addVehicle(agv);
			}
			Common.AGVS.add(agv);
		}
		
		System.out.println("the vehicle queue size is: " + Common.V_QUEUE.getSize());

		JSONObject object = new JSONObject();
		object.put("status", 1);
		HttpServletRequest request = ServletActionContext.getRequest();
		request.setAttribute("attrs", object.toString());
		System.out.println(agv.toString());
		return SUCCESS;
	}

	/**
	 * AGV队列操作
	 * 
	 * @return 
	 *           URL： mjzk/operate
	 */
	@Action(value = "agvOperate", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String goAGV() {
		
		System.out.println(model.toString());
		setAgvGoStatus(model.getAgv_code(), model.getGo());
		return SUCCESS;
	}

	/**
	 * 修改AGV的信息
	 * @return
	 *       URL： mjzk/update
	 */
	@Action(value="agvUpdate",results={@Result(name="success",location="/WEB-INF/jsondata/data.jsp")})
	public String Update(){
		System.out.println(model.toString());
		JSONObject object = JSONObject.fromObject(updateAGVInfo(model.getAgv_code())) ;
        HttpServletRequest request = ServletActionContext.getRequest() ;
        request.setAttribute("attrs", object.toString());
		return SUCCESS ;
	}
	
	/**
	 * 查看所有AGV的状态
	 * 
	 * @return
	 */
	@Action(value = "agvstate", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String getAllAGVState() {
		/*
		 * List<AgvState> list = stateService.findByPage(page, rows);
		 * Data<AgvState> data = new Data<AgvState>();
		 * data.setTotal(stateService.getTotalCount()); data.setRows(list);
		 */
		System.out.println("查看所有AGV的状态......");
		List<AgvRTData> list = AGVDataProcessFactory.geAgvRTDatas();
		Data<AgvRTData> data = new Data<AgvRTData>();
		data.setRows(list);
		data.setTotal(list.size());
		JSONObject object = JSONObject.fromObject(data);
		HttpServletRequest request = ServletActionContext.getRequest();
		request.setAttribute("attrs", object.toString());
		return SUCCESS;
	}

	@Action(value = "allagv", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String getAllAgv() {
		// List<Agv> list = service.findByPage(page, rows);
		List<Agv> list = getAgvs();
		Data<Agv> data = new Data<Agv>();
		// data.setTotal(service.getTotalCount());

		data.setTotal(list.size());

		data.setRows(list);
		JSONObject object = JSONObject.fromObject(data);
		HttpServletRequest request = ServletActionContext.getRequest();
		request.setAttribute("attrs", object.toString());
		return SUCCESS;
	}

	/**
	 * 获取当前系统中的所有AGV,包括正在执行任务的，和正在等待任务的。所有的AGV不是正在执行任务，就是正在等待任务。所以不用去查数据库
	 * 
	 * @return
	 */
	public List<Agv> getAgvs() {
		List<Agv> list = new ArrayList<Agv>();
		Iterator<Agv> iterator = Common.AGVS.iterator();
		while (iterator.hasNext()) {
			Agv agv = iterator.next();
			list.add(agv);
		}
		return list;
	}
	
	/**
	 * 获取需要修改的AGV
	 * 
	 * @param code
	 * @param go
	 */
	public Agv updateAGVInfo(String code) {
		Iterator<Agv> iterator = Common.AGVS.iterator() ;
		while(iterator.hasNext()){
			Agv agv = iterator.next() ;
			if(agv.getAgv_code().equals(code)){
				 return agv ;
			}
		}
		return null ;
	}
	
	public void setAgvGoStatus(String code,int go){
		logger.info("当前车辆队列中的数量为： " + Common.V_QUEUE.getSize());	
		Iterator<Agv> iterator = Common.AGVS.iterator() ;
		while(iterator.hasNext()){
			Agv agv = iterator.next() ;
			if(agv.getAgv_code().equals(code)){
				if(go == 1){
					/**原先在队列中，现在脱离队列**/
					agv.setGo(2);
					Common.V_QUEUE.removeAGV(code);
					logger.info("编号为："+agv.getAgv_code()+"的AGV已脱离队列，当前车辆队列中的数量为： " + Common.V_QUEUE.getSize());
				}else{
					/**原先不在队列中，现在加入到队列**/
					agv.setGo(1);
					Common.V_QUEUE.addVehicle(agv);
					logger.info("编号为："+agv.getAgv_code()+"的AGV已加入队列，当前车辆队列中的数量为： " + Common.V_QUEUE.getSize());
				}
			}
		}
	}

	/**
	 * 通过code来判断是否是新增AGV还是修改AGV，如果code 相同则修改。
	 * 
	 * @param code
	 * @return true 为修改，false为新增
	 */
	public boolean isUpdate(Agv agv) {
		logger.info("当前车辆队列中的数量为： " + Common.V_QUEUE.getSize());	
		Iterator<Agv> iterator = Common.AGVS.iterator();
		while (iterator.hasNext()) {
			Agv obj = iterator.next();
			if (obj.getAgv_code().equals(agv.getAgv_code())) {
				obj.setAgv_desc(agv.getAgv_desc());
				obj.setIp_Adr(agv.getIp_Adr());
				obj.setProduct_num(agv.getProduct_num());
				obj.setInitSpd(agv.getInitSpd());
				obj.setGo(agv.getGo());
				if(agv.getGo() == 1){
					Common.V_QUEUE.addVehicle(agv);
				}else{
					Common.V_QUEUE.removeAGV(agv.getAgv_code());
				}
				return true;
			}
		}
		logger.info("修改编号为："+agv.getAgv_code()+"的AGV之后，车辆队列中的数量为： " + Common.V_QUEUE.getSize());
		return false;
	}
	
	public int getRows() {
		return rows;
	}

	public void setRows(int rows) {
		this.rows = rows;
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}
}
