package com.mjzk.agv.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.mjzk.agv.base.BaseAction;
import com.mjzk.agv.beans.Agv;
import com.mjzk.agv.beans.Task;
import com.mjzk.agv.common.Common;
import com.mjzk.agv.pojo.Data;
import com.mjzk.agv.serviceimpl.TaskService;
import com.mjzk.agv.utils.TaskCode;

import net.sf.json.JSONObject;

/**
 * 
 * @author XieChangJiang
 *
 */
@Namespace("/mjzk")
@ParentPackage("struts-default")
@Controller
@Scope("prototype")
public class TaskAction extends BaseAction<Task> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Resource
	private TaskService taskService ;
	
	public static Logger logger = Logger.getLogger(TaskAction.class);
	
	/**
	 * 行
	 */
	private int rows;

	/**
	 * 多少页
	 */
	private int page;
	
	private String startRfid ;
	private String targetRfid ;

	/**
	 * 添加新的任务
	 * 
	 * @return url: mjzk/newTask
	 * 
	 */
	@Action(value = "newtask", results = { @Result(name = "success", location = "/success.jsp") })
	public String newTask() {
		Task task = getModel();
		System.out.println(task.toString());
		
		/**如果不是是修改**/
		if(!isUpdate(task)){
			task.setTask_code(TaskCode.getTaskCode());
			taskService.save(task);
			if (task.getGo() == 1) {
				/** 启用 **/
				Common.T_QUEUE.addTask(task);
			}
			Common.TASK.add(task);
		}
		System.out.println("the task queue size is: " + Common.T_QUEUE.getSize());
		return SUCCESS;
	}

	/**
	 * 获取当前所有的 Task,正在等待的任务和正在执行的任务
	 * 
	 * @return 
	 *         url: mjzk/listtask
	 */
	@Action(value = "listtask", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String getAllTask() {
		List<Task> list = getTasks();
		Data<Task> data = new Data<Task>();
		data.setTotal(list.size());
		data.setRows(list);
		JSONObject object = JSONObject.fromObject(data);
		HttpServletRequest request = ServletActionContext.getRequest();
		request.setAttribute("attrs", object.toString());
		
		return SUCCESS;
	}

	/**
	 * 任务队列操作
	 * 
	 * @return 
	 *           URL： mjzk/taskOperate
	 */
	@Action(value = "taskOperate", results = { @Result(name = "success", location = "/WEB-INF/jsondata/data.jsp") })
	public String goTask() {
		System.out.println(model.toString());
		setTaskGoStatus(model.getTask_code(), model.getGo());
		return SUCCESS;
	}
	
	/**
	 * 修改Task的队列信息
	 * @return
	 *       URL： mjzk/taskUpdate
	 */
	@Action(value="taskUpdate",results={@Result(name="success",location="/WEB-INF/jsondata/data.jsp")})
	public String Update(){
		System.out.println(model.toString());
		JSONObject object = JSONObject.fromObject(updateTaskInfo(model.getTask_code())) ;
        HttpServletRequest request = ServletActionContext.getRequest() ;
        request.setAttribute("attrs", object.toString());
		return SUCCESS ;
	}
	
	public void setTaskGoStatus(String code,int go){
		logger.info("当前任务队列中的任务数量为： " + Common.T_QUEUE.getSize());	
		Iterator<Task> iterator = Common.TASK.iterator() ;
		while(iterator.hasNext()){
			Task task = iterator.next() ;
			if(task.getTask_code().equals(code)){
				if(go == 1){
					/**原先在队列中，现在脱离队列**/
					task.setGo(2);
					Common.T_QUEUE.removeTask(code);
					logger.info("编号为："+task.getTask_code()+"的 Task 已脱离队列，当前任务队列中的数量为： " + Common.T_QUEUE.getSize());
				}else{
					/**原先不在队列中，现在加入到队列**/
					task.setGo(1);
					Common.T_QUEUE.addTask(task);
					logger.info("编号为："+task.getTask_code()+"的任务已加入队列，当任务队列中的数量为： " + Common.T_QUEUE.getSize());
				}
			}
		}
	}
	
	
	/**
	 * 获取需要修改的 Task
	 * 
	 * @param code
	 * @param go
	 */
	public Task updateTaskInfo(String code) {
		Iterator<Task> iterator = Common.TASK.iterator() ;
		while(iterator.hasNext()){
			Task task = iterator.next() ;
			if(task.getTask_code().equals(code)){
				 return task ;
			}
		}
		return null ;
	}
	
	/**
	 * 通过code来判断是否是新增task还是修改task，如果code 相同则修改。
	 * 
	 * @param code
	 * @return true 为修改，false为新增
	 */
	public boolean isUpdate(Task task) {
		logger.info("当前任务队列中的数量为： " + Common.T_QUEUE.getSize());	
		Iterator<Task> iterator = Common.TASK.iterator();
		while (iterator.hasNext()) {
			Task obj = iterator.next();
			if (obj.getTask_code().equals(task.getTask_code())) {
				obj.setName(task.getName()) ;
				obj.setPriority(task.getPriority());
				obj.setStartRfid(task.getStartRfid());
				obj.setTargetRfid(task.getTargetRfid());
				obj.setGo(task.getGo());
				if(task.getGo() == 1){
					Common.T_QUEUE.addTask(task);
				}else{
					Common.T_QUEUE.removeTask(task.getTask_code());
				}
				return true;
			}
		}
		logger.info("修改编号为："+task.getTask_code()+"的任务之后，任务队列中的数量为： " + Common.T_QUEUE.getSize());
		return false;
	}
	
	public List<Task> getTasks(){
		List<Task> list = new ArrayList<Task>() ;
		Iterator<Task> iterator = Common.TASK.iterator() ;
		while(iterator.hasNext()){
			Task task = iterator.next();
			list.add(task) ;
		}
		return list;
	}
	
	public int getRows() {
		return rows;
	}

	public void setRows(int rows) {
		this.rows = rows;
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public String getStartRfid() {
		return startRfid;
	}

	public void setStartRfid(String startRfid) {
		this.startRfid = startRfid;
	}

	public String getTargetRfid() {
		return targetRfid;
	}

	public void setTargetRfid(String targetRfid) {
		this.targetRfid = targetRfid;
	}
}
