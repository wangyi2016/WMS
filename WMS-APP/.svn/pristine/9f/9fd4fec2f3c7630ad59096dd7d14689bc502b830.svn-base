package com.mjzk.agv.algorithm;

import java.util.ArrayList;
import java.util.List;

import com.mjzk.agv.common.Common;

/**
 * floyd算法，无向图最短路径
 * 
 * @author XieChangJiang
 *
 */
public class FloydTemp {

	/**
	 * 任意两点间的长度
	 */
	private int[][] length = null;

	/**
	 * 任意两点间的路径
	 */
	private int[][][] path = null;

	/**
	 * Floyd 算法的实现
	 * 
	 * @param G
	 */
	private void floyd() {
		int MAX = 100;
		int row = Common.mapMatric.length; /** 图G的行数 **/
		int[][] spot = new int[row][row]; /** 定义任意两点之间经过的点 **/
		int[] onePath = new int[row]; /** 记录一条路径 **/

		length = new int[row][row];
		path = new int[row][row][];

		for (int i = 0; i < row; i++)
			/** 处理图两点之间的路径 **/
			for (int j = 0; j < row; j++) {
				if (Common.mapMatric[i][j] == 0)
					Common.mapMatric[i][j] = MAX; /** 没有路径的两个点之间的路径为默认最大 **/
				if (i == j)
					Common.mapMatric[i][j] = 0; /** 本身的路径长度为0 **/
			}

		for (int i = 0; i < row; i++)
			/** 初始化为任意两点之间没有路径 **/
			for (int j = 0; j < row; j++)
				spot[i][j] = -1;

		for (int i = 0; i < row; i++)
			/** 假设任意两点之间的没有路径 **/
			onePath[i] = -1;

		for (int v = 0; v < row; ++v)
			for (int w = 0; w < row; ++w)
				length[v][w] = Common.mapMatric[v][w];

		for (int u = 0; u < row; ++u)
			for (int v = 0; v < row; ++v)
				for (int w = 0; w < row; ++w)
					if (length[v][w] > length[v][u] + length[u][w]) {
						length[v][w] = length[v][u] + length[u][w]; /** 如果存在更短路径则取更短路径 **/
						spot[v][w] = u; /** 把经过的点加入 **/
					}

		for (int i = 0; i < row; i++) {
			/** 求出所有的路径 **/
			int[] point = new int[1];
			for (int j = 0; j < row; j++) {
				point[0] = 0;
				onePath[point[0]++] = i;
				outputPath(spot, i, j, onePath, point);
				path[i][j] = new int[point[0]];
				for (int s = 0; s < point[0]; s++)
					path[i][j][s] = onePath[s];
			}
		}
	}

	private void outputPath(int[][] spot, int i, int j, int[] onePath, int[] point) {
		/**
		 * 输出i到j的路径的实际代码,point[]记录一条路径的长度
		 */
		if (i == j)
			return;
		if (spot[i][j] == -1)
			onePath[point[0]++] = j;
		// System.out.print(" "+j+" ");
		else {
			outputPath(spot, i, spot[i][j], onePath, point);
			outputPath(spot, spot[i][j], j, onePath, point);
		}
	}

	/**
	 * 获取任意两个点的最短距离以及路径
	 * 
	 * @param G
	 *            图权值矩阵
	 * @param start
	 *            开始节点
	 * @param end
	 *            结束节点
	 * @return map , key为 start -> end 的路径 , value为最短路径值
	 */
	public List<Integer> getFloyd(int start, int end) {
		floyd();
		List<Integer> list = new ArrayList<Integer>() ;/** key 为 start -> end 的路径  ， value 为最短路径值**/
		for (int i = 0; i < Common.mapMatric.length; i++)
			for (int j = i; j < Common.mapMatric[i].length; j++) {
				if (i == start && j == end) {
					// System.out.println();
					System.out.print("From " + i + " to " + j + " path is: ");
					for (int k = 0; k < path[i][j].length; k++) {
						System.out.print(path[i][j][k] + " ");
						list.add(path[i][j][k]);
					}
					System.out.println();
					System.out.println("From " + i + " to " + j + " length :" + length[i][j]);
				}
			}
		return list;
	}
	
	public static void main(String[] args) {
		
		/** 测试数据 data , W , W2 **/
		int data[][] = { { 0, 27, 44, 17, 11, 27, 42, 0, 0, 0, 20, 25, 21, 21, 18, 27, 0 },
				{ 27, 0, 31, 27, 49, 0, 0, 0, 0, 0, 0, 0, 52, 21, 41, 0, 0 },
				{ 44, 31, 0, 19, 0, 27, 32, 0, 0, 0, 47, 0, 0, 0, 32, 0, 0 },
				{ 17, 27, 19, 0, 14, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0 },
				{ 11, 49, 0, 14, 0, 13, 20, 0, 0, 28, 15, 0, 0, 0, 15, 25, 30 },
				{ 27, 0, 27, 0, 13, 0, 9, 21, 0, 26, 26, 0, 0, 0, 28, 29, 0 },
				{ 42, 0, 32, 0, 20, 9, 0, 13, 0, 32, 0, 0, 0, 0, 0, 33, 0 },
				{ 0, 0, 0, 0, 0, 21, 13, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 19, 0, 11, 20, 0, 0, 0, 0, 33, 21 },
				{ 0, 0, 0, 0, 28, 26, 32, 0, 11, 0, 10, 20, 0, 0, 29, 14, 13 },
				{ 20, 0, 47, 30, 15, 26, 0, 0, 20, 10, 0, 18, 0, 0, 14, 9, 20 },
				{ 25, 0, 0, 0, 0, 0, 0, 0, 0, 20, 18, 0, 23, 0, 0, 14, 0 },
				{ 21, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 27, 22, 0, 0 },
				{ 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0 },
				{ 18, 41, 32, 31, 15, 28, 0, 0, 0, 29, 14, 0, 22, 0, 0, 11, 0 },
				{ 27, 0, 0, 0, 25, 29, 33, 0, 33, 14, 9, 14, 0, 0, 11, 0, 9 },
				{ 0, 0, 0, 0, 30, 0, 0, 0, 21, 13, 20, 0, 0, 0, 0, 9, 0 } };

		int[][] W = { 
				{ 0, 1, 4, 0, 0, 0 }, 
				{ 1, 0, 2, 7, 5, 0 }, 
				{ 4, 2, 0, 0, 1, 0 }, 
				{ 0, 7, 0, 0, 3, 2 },
				{ 0, 5, 1, 3, 0, 6 }, 
				{ 0, 0, 0, 2, 6, 0 } };

		int[][] W2 = { 
				{ 0, 6, 3, 0, 0, 0 }, 
				{ 6, 0, 2, 5, 0, 0 }, 
				{ 3, 2, 0, 3, 4, 0 }, 
				{ 0, 5, 3, 0, 2, 3 },
				{ 0, 0, 4, 2, 0, 5 }, 
				{ 0, 0, 0, 3, 5, 0 } };

		for (int i = 0; i < data.length; i++)
			for (int j = i; j < data.length; j++)
				if (data[i][j] != data[j][i])
					return;

		FloydTemp floyd = new FloydTemp() ;

		/*Map<List<Integer>, Integer> map = floyd.getFloyd(W2,1,4);
	    Set<List<Integer>> set = map.keySet() ;
	    for (List<Integer> list : set) {
			for(int i = 0 ; i < list.size() ; i++){
				System.out.print(list.get(i) + " ");
			}
		}*/
	}
}
